#!/usr/bin/env ruby

require 'optparse'

flags = %i(l a g b m p j)
except = []

OptionParser.new do |opts|
  opts.banner = "Usage: bin/update [options]\n\n"

  opts.on('-f F', '--flags F', 'Flags for the update script (by default all of them)',
                               'l - bundle exec rake log:clear',
                               'a - bundle exec rake assets:clean',
                               'g - git pull',
                               'b - bundle install',
                               'm - bundle exec rake db:migrate',
                               'p - RAILS_ENV=production bundle exec rake assets:precompile',
                               'j - [ -e bin/delayed_job ] && RAILS_ENV=production bin/delayed_job restart',
                               "Example: gm\n\n") do |f|
    flags = f.split('').map(&:to_sym)
  end

  opts.on('-e E', '--except E', 'Except flags for the update script',
                                "See documentation for --flags\n\n") do |e|
    except = e.split('').map(&:to_sym)
  end
end.parse!

flags -= except

cmds = {
  l: 'bundle exec rake log:clear',
  a: 'bundle exec rake assets:clean',
  g: 'git pull',
  b: 'bundle install',
  m: 'bundle exec rake db:migrate',
  p: 'RAILS_ENV=production bundle exec rake assets:precompile',
  j: '[ -e bin/delayed_job ] && RAILS_ENV=production bin/delayed_job restart',
}

cmds.each do |flag, cmd|
  next unless flags.include? flag

  puts "STARTED `#{cmd}` \n\n"
  t = Time.now
  puts `#{cmd}`
  puts "COMPLETED IN #{ '%.2f' % (Time.now - t) } SECONDS `#{cmd}` \n\n"
end

